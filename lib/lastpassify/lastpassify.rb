require "thor"
require "yaml"

module LastPassify
  class LastPassify < Thor::Group
    include Thor::Actions

    # Exception for when LastPass-CLI is not installed
    class LPassNotInstalled < RuntimeError; end


    # files will be available as attr_accessors
    argument :input_file, :type => :string, :default => "config/database.example.yml", :desc => "Input file"
    argument :output_file, :type => :string, :default => "config/database.yml", :desc => "Output file"

    class_option :production, :type => :boolean, :aliases => "-p", :desc => "Include production sections"
    class_option :staging, :type => :boolean, :aliases => "-s", :desc => "Include staging sections"

    def self.source_root
      File.expand_path("./")
    end

    desc "Takes a file to process, and outputs a new file populated with values from LastPass."

    def main
      raise LPassNotInstalled, "Please install LastPass-CLI - https://github.com/lastpass/lastpass-cli" unless lastpass_installed?

      template input_file, output_file do |content|
        yml = YAML::load(content)
        yml.keys.each do |key|
          unless options[:staging]
            yml.delete(key) if key.to_s.match(/staging/)
            yml.delete(key) if key.to_s.match(/qat/)
          end
          unless options[:production]
            yml.delete(key) if key.to_s.match(/production/)
          end
        end
        content = YAML.dump(yml)
        content << "# This file was automatically generated by LastPassify on #{Time.now.strftime('%v')}.\n"
      end
    end

    no_commands do
      def lookup(source, shared_path, field)
        if ['username', 'password', 'url', 'notes', 'id', 'name'].include? field
          response = `lpass show --#{field} "#{shared_path}"`.chomp
        else
          response = `lpass show --field=#{field} "#{shared_path}"`.chomp
        end

        if response.eql? ""
          # response = "# TODO: '#{shared_path}' = field #{field}"
          puts "Please fill in: '#{shared_path}' : #{field} field"
        end

        response
      end
    end

    private

    def lastpass_installed?
      system("command -v lpass")
    end
  end
end
